fullnameOverride: ${prometheus_fullnameOverride}
 
defaultRules:
  create: ${default_rules_create}
  rules:
    alertmanager: ${alertmanager_rule_enabled}
    etcd: ${etcd_rule_enabled}
    configReloaders: ${config_reloaders_enabled}
    general: ${general_rules_enabled}
    k8s: ${k8s_rules_enabled}
    k8sContainerCpuUsageSecondsTotal: ${k8s_container_cpu_usage_enabled}
    k8sContainerMemoryCache: ${k8s_container_memory_cache_enabled}
    k8sContainerMemoryRss: ${k8s_container_memory_rss_enabled}
    k8sContainerMemorySwap: ${k8s_container_memory_swap_enabled}
    k8sContainerResource: ${k8s_container_resource_enabled}
    k8sContainerMemoryWorkingSetBytes: ${k8s_container_memory_workingset_bytes_enabled}
    k8sPodOwner: ${k8s_pod_owner_enabled}
    kubeApiserverAvailability: ${kube_apiserver_availability_enabled}
    kubeApiserverBurnrate: ${kube_apiserver_burnrate_enabled}
    kubeApiserverHistogram: ${kube_apiserver_histogram_enabled}
    kubeApiserverSlos: ${kube_apiserver_slos_enabled}
    kubeControllerManager: ${kube_controller_manager_enabled}
    kubelet: ${kubelet_enabled}
    kubeProxy: ${kube_proxy_enabled}
    kubePrometheusGeneral: ${kube_prometheus_general_enabled}
    kubePrometheusNodeRecording: ${kube_prometheus_node_recording_enabled}
    kubernetesApps: ${kubernetes_apps_enabled}
    kubernetesResources: ${kubernetes_resources_enabled}
    kubernetesStorage: ${kubernetes_storage_enabled}
    kubernetesSystem: ${kubernetes_system_enabled}
    kubeSchedulerAlerting: ${kube_scheduler_alerting_enabled}
    kubeSchedulerRecording: ${kube_scheduler_recording_enabled}
    kubeStateMetrics: ${kube_state_metrics_enabled}
    network: ${network_rules_enabled}
    node: ${node_rules_enabled}
    nodeExporterAlerting: ${node_exporter_alerting_enabled}
    nodeExporterRecording: ${node_exporter_recording_enabled}
    prometheus: ${prometheus_rules_enabled}
    prometheusOperator: ${prometheus_operator_enabled}
    windows: ${windows_rules_enabled}
 
alertmanager:
  fullnameOverride: ${alertmanager_fullnameOverride}
  enabled: ${alertmanager_enabled}
  ingress:
    enabled: ${alertmanager_ingress_enabled}
 
grafana:
  enabled: ${grafana_enabled}
  fullnameOverride: ${grafana_fullnameOverride}
  forceDeployDatasources: ${grafana_force_deploy_datasources}
  forceDeployDashboards: ${grafana_force_deploy_dashboards}
  defaultDashboardsEnabled: ${grafana_default_dashboards_enabled}
  defaultDashboardsTimezone: ${grafana_default_dashboards_timezone}
  adminPassword: ${grafana_admin_password}
  persistence:
    enabled: ${grafana_persistence_enabled}
    size: ${grafana_persistence_size}
  resources:
    requests:
      memory: "${grafana_memory_request}"
      cpu: "${grafana_cpu_request}"
    limits:
      memory: "${grafana_memory_limit}"
      cpu: "${grafana_cpu_limit}"
  serviceAccount:
    create: ${grafana_service_account_create}
    name: ${grafana_service_account_name}
    automountServiceAccountToken: ${grafana_automount_service_account_token}
  rbac:
    create: ${grafana_rbac_create}
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: "${kafka_provider_name}"
          orgId: ${kafka_org_id}
          folder: "${kafka_folder}"
          type: ${kafka_type}
          disableDeletion: ${kafka_disable_deletion}
          editable: ${kafka_editable}
          options:
            path: ${kafka_dashboard_path}
        - name: "${postgresql_provider_name}"
          orgId: ${postgresql_org_id}
          folder: "${postgresql_folder}"
          type: ${postgresql_type}
          disableDeletion: ${postgresql_disable_deletion}
          editable: ${postgresql_editable}
          options:
            path: ${postgresql_dashboard_path}
  dashboards:
    kafka:
      kafka-dash:
        gnetId: ${kafka_gnet_id}
        revision: ${kafka_revision}
        datasource: ${kafka_datasource}
    postgresql:
      postgresql-dash:
        gnetId: ${postgresql_gnet_id}
        revision: ${postgresql_revision}
        datasource: ${postgresql_datasource}
  service:
    portName: ${grafana_port_name}
    type: ${grafana_service_type}
 
kubeApiServer:
  enabled: ${kube_api_server_enabled}
 
coreDns:
  enabled: ${core_dns_enabled}
 
kubeDns:
  enabled: ${kube_dns_enabled}
 
kubeEtcd:
  enabled: ${kube_etcd_enabled}
 
kubeStateMetrics:
  enabled: ${kube_state_metrics_enabled}
 
prometheus-node-exporter:
  namespaceOverride: ${prometheus_node_exporter_namespace_override}
  podLabels:
    jobLabel: ${prometheus_node_exporter_job_label}
  releaseLabel: ${prometheus_node_exporter_release_label}
  extraArgs:
    - ${prometheus_node_exporter_arg_1}
    - ${prometheus_node_exporter_arg_2}
  service:
    portName: ${prometheus_node_exporter_port_name}
  prometheus:
    monitor:
      enabled: ${prometheus_node_exporter_monitor_enabled}
 
prometheus:
  enabled: ${prometheus_enabled}
  prometheusSpec:
    additionalScrapeConfigs:
      - job_name: ${postgresql_job_name}
        static_configs:
          - targets: ['${postgresql_target}']
      - job_name: ${kafka_job_name}
        scrape_interval: ${kafka_scrape_interval}
        metrics_path: ${kafka_metrics_path}
        scrape_timeout: ${kafka_scrape_timeout}
        static_configs:
          - targets: ['${kafka_target}']
 
  service:
    port: ${prometheus_service_port}
    targetPort: ${prometheus_service_target_port}
    externalIPs: ${prometheus_service_external_ips}
    nodePort: ${prometheus_service_node_port}
    loadBalancerIP: ${prometheus_service_load_balancer_ip}
    loadBalancerSourceRanges: ${prometheus_service_load_balancer_source_ranges}
    externalTrafficPolicy: ${prometheus_service_external_traffic_policy}
    type: ${prometheus_service_type}
 
  serviceMonitor:
    enabled: ${prometheus_service_monitor_enabled}
 
  serviceAccount:
    create: ${prometheus_service_account_create}
    name: ${prometheus_service_account_name}
    automountServiceAccountToken: ${prometheus_service_account_automount_token}
 
pushgateway:
  enabled: ${pushgateway_enabled}