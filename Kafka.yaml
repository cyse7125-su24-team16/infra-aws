provisioning:
  topics:
    - name: '${topic_name}'
      replicationFactor: ${replication_factor}
      partitions: ${partitions}
  enabled: ${provisioning_enabled}
  numPartitions: ${num_partitions}
  replicationFactor: ${replication_factor}
  podLabels:
    sidecar.istio.io/inject: '${istio_sidecar_inject}'
 
replicaCount: ${replica_count}
 
persistence:
  enabled: ${persistence_enabled}
  storageClass: "${storage_class}"
  size: ${persistence_size}
 
logPersistence:
  enabled: ${log_persistence_enabled}
  storageClass: "${log_storage_class}"
  size: ${log_persistence_size}
 
resources:
  requests:
    memory: "${memory_request}"
    cpu: ${cpu_request}
  limits:
    memory: "${memory_limit}"
    cpu: "${cpu_limit}"
 
metrics:
  kafka:
    enabled: ${kafka_metrics_enabled}
 
updateStrategy:
  type: ${update_strategy_type}
  rollingUpdate:
    maxUnavailable: ${max_unavailable}
  minReadySeconds: ${min_ready_seconds}
  progressDeadlineSeconds: ${progress_deadline_seconds}
 
sasl:
  client:
    users:
      - ${sasl_user}
    passwords: "${sasl_password}"
 
limits:
  type: ${limit_type}
  default:
    memory: "${default_memory_limit}"
    cpu: "${default_cpu_limit}"
  defaultRequest:
    memory: "${default_memory_request}"
    cpu: "${default_cpu_request}"
  max:
    memory: "${max_memory_limit}"
    cpu: "${max_cpu_limit}"
 
controller:
  autoscaling:
    hpa:  
      enabled: ${autoscaling_enabled}
      minReplicas: ${min_replicas}
      maxReplicas: ${max_replicas}
      targetCPU: ${target_cpu}
      targetMemory: ${target_memory}
 
podDisruptionBudget:
  enabled: ${pdb_enabled}
  maxUnavailable: ${pdb_max_unavailable}
 
affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
                - ${app_name}
        topologyKey: "${topology_key}"
 
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: "${node_selector_key}"
          operator: In
          values:
          - ${zone_1}
          - ${zone_2}
          - ${zone_3}
 
nodeSelector:
  "beta.kubernetes.io/os": ${os_type}
 
tolerations:
  - key: "${toleration_key_1}"
    operator: "${toleration_operator_1}"
    effect: "${toleration_effect_1}"
    tolerationSeconds: ${toleration_seconds_1}
  - key: "${toleration_key_2}"
    operator: "${toleration_operator_2}"
    effect: "${toleration_effect_2}"
    tolerationSeconds: ${toleration_seconds_2}
 
metrics:
  jmx:
    enabled: ${jmx_metrics_enabled}
    kafkaJmxPort: ${kafka_jmx_port}
  service:
      ports:
        metrics: ${metrics_port}
      annotations:
        prometheus.io/scrape: "${prometheus_scrape}"
        prometheus.io/port: "${prometheus_port}"
        prometheus.io/path: "${prometheus_path}"
 
serviceAccount:
  create: ${service_account_create}
  automountServiceAccountToken: ${automount_service_account_token}
 
rbac:
  create: ${rbac_create}