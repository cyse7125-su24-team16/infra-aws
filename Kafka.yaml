# values.yaml
provisioning:
  topics:
    - name: ${topics_name}
      replicationFactor: ${topics_replicationFactor}
      partitions: ${topics_partitions}
  enabled: ${provisioning_enabled}
  numPartitions: ${provisioning_numPartitions}
  replicationFactor: ${provisioning_replicationFactor}

replicaCount: ${replicaCount}

persistence:
  enabled: ${persistence_enabled}
  storageClass: ${persistence_storageClass}
  size: ${persistence_size}

logPersistence:
  enabled: ${logPersistence_enabled}
  storageClass: ${logPersistence_storageClass}
  size: ${logPersistence_size}

resources:
  requests:
    memory: ${resources_requests_memory}
    cpu: ${resources_requests_cpu}
  limits:
    memory: ${resources_limits_memory}
    cpu: ${resources_limits_cpu}

metrics:
  kafka:
    enabled: ${metrics_kafka_enabled}

updateStrategy:
  type: ${updateStrategy_type}
  rollingUpdate:
    maxUnavailable: ${updateStrategy_rollingUpdate_maxUnavailable}
  minReadySeconds: ${updateStrategy_minReadySeconds}
  progressDeadlineSeconds: ${updateStrategy_progressDeadlineSeconds}

sasl:
  client:
    users:
      - ${sasl_client_users}
    passwords: ${sasl_client_passwords}

limits:
  type: ${limits_type}
  default:
    memory: ${limits_default_memory}
    cpu: ${limits_default_cpu}
  defaultRequest:
    memory: ${limits_defaultRequest_memory}
    cpu: ${limits_defaultRequest_cpu}
  max:
    memory: ${limits_max_memory}
    cpu: ${limits_max_cpu}

autoScaling:
  enabled: ${autoScaling_enabled}
  minReplicas: ${autoScaling_minReplicas}
  maxReplicas: ${autoScaling_maxReplicas}
  targetCPUUtilizationPercentage: ${autoScaling_targetCPUUtilizationPercentage}

hpa:
  enabled: ${hpa_enabled}
  minReplicas: ${hpa_minReplicas}
  maxReplicas: ${hpa_maxReplicas}
  targetCPU: ${hpa_targetCPU}

podDisruptionBudget:
  enabled: ${podDisruptionBudget_enabled}
  maxUnavailable: ${podDisruptionBudget_maxUnavailable}

affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: ${affinity_podAntiAffinity_requiredDuringSchedulingIgnoredDuringExecution_labelSelector_matchExpressions_key}
              operator: ${affinity_podAntiAffinity_requiredDuringSchedulingIgnoredDuringExecution_labelSelector_matchExpressions_operator}
              values:
                - ${affinity_podAntiAffinity_requiredDuringSchedulingIgnoredDuringExecution_labelSelector_matchExpressions_values}
        topologyKey: ${affinity_podAntiAffinity_requiredDuringSchedulingIgnoredDuringExecution_topologyKey}

  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: ${affinity_nodeAffinity_requiredDuringSchedulingIgnoredDuringExecution_nodeSelectorTerms_matchExpressions_key}
          operator: ${affinity_nodeAffinity_requiredDuringSchedulingIgnoredDuringExecution_nodeSelectorTerms_matchExpressions_operator}
          values:
          - ${affinity_nodeAffinity_requiredDuringSchedulingIgnoredDuringExecution_nodeSelectorTerms_matchExpressions_values[0]}
          - ${affinity_nodeAffinity_requiredDuringSchedulingIgnoredDuringExecution_nodeSelectorTerms_matchExpressions_values[1]}
          - ${affinity_nodeAffinity_requiredDuringSchedulingIgnoredDuringExecution_nodeSelectorTerms_matchExpressions_values[2]}

nodeSelector:
  "beta.kubernetes.io/os": ${nodeSelector_beta_kubernetes_io_os}

tolerations:
  - key: ${tolerations_0_key}
    operator: ${tolerations_0_operator}
    effect: ${tolerations_0_effect}
    tolerationSeconds: ${tolerations_0_tolerationSeconds}
  - key: ${tolerations_1_key}
    operator: ${tolerations_1_operator}
    effect: ${tolerations_1_effect}
    tolerationSeconds: ${tolerations_1_tolerationSeconds}

metrics:
  jmx:
    enabled: ${metrics_jmx_enabled}
    kafkaJmxPort: ${metrics_jmx_kafkaJmxPort}
  service:
    ports:
      metrics: ${metrics_service_ports_metrics}
    annotations:
      prometheus.io/scrape: ${metrics_service_annotations_prometheus_io_scrape}
      prometheus.io/port: ${metrics_service_annotations_prometheus_io_port}
      prometheus.io/path: ${metrics_service_annotations_prometheus_io_path}
